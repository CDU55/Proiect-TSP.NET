//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proiect_TSPNET
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaItemDTO", Namespace="http://schemas.datacontract.org/2004/07/Proiect_TSPNET")]
    public partial class MediaItemDTO : object
    {
        
        private System.DateTime DateField;
        
        private string DescriptionField;
        
        private string EventField;
        
        private string ExtensionField;
        
        private int IdField;
        
        private bool IsPhotoField;
        
        private string LocationField;
        
        private bool MarkedForDeleteField;
        
        private string PathField;
        
        private bool PermanentDeleteField;
        
        private string TitleField;
        
        private Proiect_TSPNET.PersonDTO[] personsField;
        
        private Proiect_TSPNET.PropertyDTO[] propertiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Event
        {
            get
            {
                return this.EventField;
            }
            set
            {
                this.EventField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension
        {
            get
            {
                return this.ExtensionField;
            }
            set
            {
                this.ExtensionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPhoto
        {
            get
            {
                return this.IsPhotoField;
            }
            set
            {
                this.IsPhotoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location
        {
            get
            {
                return this.LocationField;
            }
            set
            {
                this.LocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MarkedForDelete
        {
            get
            {
                return this.MarkedForDeleteField;
            }
            set
            {
                this.MarkedForDeleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PermanentDelete
        {
            get
            {
                return this.PermanentDeleteField;
            }
            set
            {
                this.PermanentDeleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Proiect_TSPNET.PersonDTO[] persons
        {
            get
            {
                return this.personsField;
            }
            set
            {
                this.personsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Proiect_TSPNET.PropertyDTO[] properties
        {
            get
            {
                return this.propertiesField;
            }
            set
            {
                this.propertiesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonDTO", Namespace="http://schemas.datacontract.org/2004/07/Proiect_TSPNET")]
    public partial class PersonDTO : object
    {
        
        private string FirstNameField;
        
        private string GroupField;
        
        private string LastNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                return this.FirstNameField;
            }
            set
            {
                this.FirstNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group
        {
            get
            {
                return this.GroupField;
            }
            set
            {
                this.GroupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName
        {
            get
            {
                return this.LastNameField;
            }
            set
            {
                this.LastNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyDTO", Namespace="http://schemas.datacontract.org/2004/07/Proiect_TSPNET")]
    public partial class PropertyDTO : object
    {
        
        private string NameField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationDTO", Namespace="http://schemas.datacontract.org/2004/07/Proiect_TSPNET")]
    public partial class LocationDTO : object
    {
        
        private string CountryField;
        
        private string NameField;
        
        private string RegionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country
        {
            get
            {
                return this.CountryField;
            }
            set
            {
                this.CountryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region
        {
            get
            {
                return this.RegionField;
            }
            set
            {
                this.RegionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proiect_TSPNET.IService")]
    public interface IService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/AddAllMediaFilesFromFolder", ReplyAction="http://tempuri.org/ILocalItemsService/AddAllMediaFilesFromFolderResponse")]
        System.Threading.Tasks.Task<bool> AddAllMediaFilesFromFolderAsync(string path, bool recursive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/AddLocalFile", ReplyAction="http://tempuri.org/ILocalItemsService/AddLocalFileResponse")]
        System.Threading.Tasks.Task<bool> AddLocalFileAsync(string path, string description, System.DateTime date, bool overwrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/CheckForMovedOrDeletedFiles", ReplyAction="http://tempuri.org/ILocalItemsService/CheckForMovedOrDeletedFilesResponse")]
        System.Threading.Tasks.Task<string[]> CheckForMovedOrDeletedFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/ExportAsJSON", ReplyAction="http://tempuri.org/ILocalItemsService/ExportAsJSONResponse")]
        System.Threading.Tasks.Task<bool> ExportAsJSONAsync(string path, Proiect_TSPNET.MediaItemDTO[] items);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/GetAllMediaPathsFromFolder", ReplyAction="http://tempuri.org/ILocalItemsService/GetAllMediaPathsFromFolderResponse")]
        System.Threading.Tasks.Task<string[]> GetAllMediaPathsFromFolderAsync(string path, bool recursive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/GetItemName", ReplyAction="http://tempuri.org/ILocalItemsService/GetItemNameResponse")]
        System.Threading.Tasks.Task<string> GetItemNameAsync(string itemPath, bool withExtension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/IsPhoto", ReplyAction="http://tempuri.org/ILocalItemsService/IsPhotoResponse")]
        System.Threading.Tasks.Task<bool> IsPhotoAsync(string itemPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/IsVideo", ReplyAction="http://tempuri.org/ILocalItemsService/IsVideoResponse")]
        System.Threading.Tasks.Task<bool> IsVideoAsync(string itemPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/MoveFile", ReplyAction="http://tempuri.org/ILocalItemsService/MoveFileResponse")]
        System.Threading.Tasks.Task MoveFileAsync(string oldPath, string newPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/RemoveMarkedFiles", ReplyAction="http://tempuri.org/ILocalItemsService/RemoveMarkedFilesResponse")]
        System.Threading.Tasks.Task RemoveMarkedFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/ViewItem", ReplyAction="http://tempuri.org/ILocalItemsService/ViewItemResponse")]
        System.Threading.Tasks.Task<bool> ViewItemAsync(string itemPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/FileterByScalar", ReplyAction="http://tempuri.org/IItemsQueryService/FileterByScalarResponse")]
        System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> FileterByScalarAsync(Proiect_TSPNET.MediaItemDTO[] items, string extension, bool extensionCheck, System.DateTime date, bool dateChecked, bool isPhoto, bool isPhotoChecked, string eventName, bool eventChecked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/FilterByRelation", ReplyAction="http://tempuri.org/IItemsQueryService/FilterByRelationResponse")]
        System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> FilterByRelationAsync(Proiect_TSPNET.MediaItemDTO[] items, string value1, string value2, string value3, string filterType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItemDynamicProperties", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemDynamicPropertiesResponse")]
        System.Threading.Tasks.Task<Proiect_TSPNET.PropertyDTO[]> GetItemDynamicPropertiesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItemPersons", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemPersonsResponse")]
        System.Threading.Tasks.Task<Proiect_TSPNET.PersonDTO[]> GetItemPersonsAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItems", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemsResponse")]
        System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> GetItemsAsync(bool markedForDelete, bool permanentDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetLocations", ReplyAction="http://tempuri.org/IItemsQueryService/GetLocationsResponse")]
        System.Threading.Tasks.Task<Proiect_TSPNET.LocationDTO[]> GetLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetPersons", ReplyAction="http://tempuri.org/IItemsQueryService/GetPersonsResponse")]
        System.Threading.Tasks.Task<Proiect_TSPNET.PersonDTO[]> GetPersonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetProperties", ReplyAction="http://tempuri.org/IItemsQueryService/GetPropertiesResponse")]
        System.Threading.Tasks.Task<Proiect_TSPNET.PropertyDTO[]> GetPropertiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItemByPath", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemByPathResponse")]
        System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO> GetItemByPathAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItemById", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemByIdResponse")]
        System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO> GetItemByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/ItemExists", ReplyAction="http://tempuri.org/IItemsQueryService/ItemExistsResponse")]
        System.Threading.Tasks.Task<bool> ItemExistsAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AddDynamicPropery", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AddDynamicProperyResponse")]
        System.Threading.Tasks.Task<bool> AddDynamicProperyAsync(string name, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AddLocation", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AddLocationResponse")]
        System.Threading.Tasks.Task<bool> AddLocationAsync(string name, string country, string region);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AddPerson", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AddPersonResponse")]
        System.Threading.Tasks.Task<bool> AddPersonAsync(string firstName, string lastName, string group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AttachDynamicProperty", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AttachDynamicPropertyResponse")]
        System.Threading.Tasks.Task<bool> AttachDynamicPropertyAsync(string itemPath, string properyName, string propertyValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AttachPerson", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AttachPersonResponse")]
        System.Threading.Tasks.Task<bool> AttachPersonAsync(string itemPath, string personFirstName, string personLastName, string personGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeDate", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeDateResponse")]
        System.Threading.Tasks.Task<bool> ChangeDateAsync(string itemPath, System.DateTime newDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeDescription", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeDescriptionResponse")]
        System.Threading.Tasks.Task<bool> ChangeDescriptionAsync(string itemPath, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeEvent", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeEventResponse")]
        System.Threading.Tasks.Task<bool> ChangeEventAsync(string itemPath, string eventName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeLocation", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeLocationResponse")]
        System.Threading.Tasks.Task<bool> ChangeLocationAsync(string itemPath, string locationName, string locationCountry, string locationRegion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/EditItem", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/EditItemResponse")]
        System.Threading.Tasks.Task<bool> EditItemAsync(string itemPath, string newDescription, bool changeDescription, string eventName, bool changeEvent, System.DateTime newDate, bool changeDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/MarkForDelete", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/MarkForDeleteResponse")]
        System.Threading.Tasks.Task<bool> MarkForDeleteAsync(string itemPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveDynamicProperty", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveDynamicPropertyResponse")]
        System.Threading.Tasks.Task<bool> RemoveDynamicPropertyAsync(string itemPath, string properyName, string propertyValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveEvent", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveEventResponse")]
        System.Threading.Tasks.Task<bool> RemoveEventAsync(string itemPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocation", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocationResponse")]
        System.Threading.Tasks.Task<bool> RemoveLocationAsync(string itemPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocationFromContext", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocationFromContextResponse")]
        System.Threading.Tasks.Task<bool> RemoveLocationFromContextAsync(string name, string country, string region);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemovePerson", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemovePersonResponse")]
        System.Threading.Tasks.Task<bool> RemovePersonAsync(string itemPath, string personFirstName, string personLastName, string personGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemovePersonFromContext", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemovePersonFromContextResponse")]
        System.Threading.Tasks.Task<bool> RemovePersonFromContextAsync(string firstName, string lastName, string group);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemovePropertyFromContext", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemovePropertyFromContextResponse")]
        System.Threading.Tasks.Task<bool> RemovePropertyFromContextAsync(string name, string value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IServiceChannel : Proiect_TSPNET.IService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Proiect_TSPNET.IService>, Proiect_TSPNET.IService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> AddAllMediaFilesFromFolderAsync(string path, bool recursive)
        {
            return base.Channel.AddAllMediaFilesFromFolderAsync(path, recursive);
        }
        
        public System.Threading.Tasks.Task<bool> AddLocalFileAsync(string path, string description, System.DateTime date, bool overwrite)
        {
            return base.Channel.AddLocalFileAsync(path, description, date, overwrite);
        }
        
        public System.Threading.Tasks.Task<string[]> CheckForMovedOrDeletedFilesAsync()
        {
            return base.Channel.CheckForMovedOrDeletedFilesAsync();
        }
        
        public System.Threading.Tasks.Task<bool> ExportAsJSONAsync(string path, Proiect_TSPNET.MediaItemDTO[] items)
        {
            return base.Channel.ExportAsJSONAsync(path, items);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllMediaPathsFromFolderAsync(string path, bool recursive)
        {
            return base.Channel.GetAllMediaPathsFromFolderAsync(path, recursive);
        }
        
        public System.Threading.Tasks.Task<string> GetItemNameAsync(string itemPath, bool withExtension)
        {
            return base.Channel.GetItemNameAsync(itemPath, withExtension);
        }
        
        public System.Threading.Tasks.Task<bool> IsPhotoAsync(string itemPath)
        {
            return base.Channel.IsPhotoAsync(itemPath);
        }
        
        public System.Threading.Tasks.Task<bool> IsVideoAsync(string itemPath)
        {
            return base.Channel.IsVideoAsync(itemPath);
        }
        
        public System.Threading.Tasks.Task MoveFileAsync(string oldPath, string newPath)
        {
            return base.Channel.MoveFileAsync(oldPath, newPath);
        }
        
        public System.Threading.Tasks.Task RemoveMarkedFilesAsync()
        {
            return base.Channel.RemoveMarkedFilesAsync();
        }
        
        public System.Threading.Tasks.Task<bool> ViewItemAsync(string itemPath)
        {
            return base.Channel.ViewItemAsync(itemPath);
        }
        
        public System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> FileterByScalarAsync(Proiect_TSPNET.MediaItemDTO[] items, string extension, bool extensionCheck, System.DateTime date, bool dateChecked, bool isPhoto, bool isPhotoChecked, string eventName, bool eventChecked)
        {
            return base.Channel.FileterByScalarAsync(items, extension, extensionCheck, date, dateChecked, isPhoto, isPhotoChecked, eventName, eventChecked);
        }
        
        public System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> FilterByRelationAsync(Proiect_TSPNET.MediaItemDTO[] items, string value1, string value2, string value3, string filterType)
        {
            return base.Channel.FilterByRelationAsync(items, value1, value2, value3, filterType);
        }
        
        public System.Threading.Tasks.Task<Proiect_TSPNET.PropertyDTO[]> GetItemDynamicPropertiesAsync(string path)
        {
            return base.Channel.GetItemDynamicPropertiesAsync(path);
        }
        
        public System.Threading.Tasks.Task<Proiect_TSPNET.PersonDTO[]> GetItemPersonsAsync(string path)
        {
            return base.Channel.GetItemPersonsAsync(path);
        }
        
        public System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> GetItemsAsync(bool markedForDelete, bool permanentDelete)
        {
            return base.Channel.GetItemsAsync(markedForDelete, permanentDelete);
        }
        
        public System.Threading.Tasks.Task<Proiect_TSPNET.LocationDTO[]> GetLocationsAsync()
        {
            return base.Channel.GetLocationsAsync();
        }
        
        public System.Threading.Tasks.Task<Proiect_TSPNET.PersonDTO[]> GetPersonsAsync()
        {
            return base.Channel.GetPersonsAsync();
        }
        
        public System.Threading.Tasks.Task<Proiect_TSPNET.PropertyDTO[]> GetPropertiesAsync()
        {
            return base.Channel.GetPropertiesAsync();
        }
        
        public System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO> GetItemByPathAsync(string path)
        {
            return base.Channel.GetItemByPathAsync(path);
        }
        
        public System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO> GetItemByIdAsync(int Id)
        {
            return base.Channel.GetItemByIdAsync(Id);
        }
        
        public System.Threading.Tasks.Task<bool> ItemExistsAsync(string path)
        {
            return base.Channel.ItemExistsAsync(path);
        }
        
        public System.Threading.Tasks.Task<bool> AddDynamicProperyAsync(string name, string value)
        {
            return base.Channel.AddDynamicProperyAsync(name, value);
        }
        
        public System.Threading.Tasks.Task<bool> AddLocationAsync(string name, string country, string region)
        {
            return base.Channel.AddLocationAsync(name, country, region);
        }
        
        public System.Threading.Tasks.Task<bool> AddPersonAsync(string firstName, string lastName, string group)
        {
            return base.Channel.AddPersonAsync(firstName, lastName, group);
        }
        
        public System.Threading.Tasks.Task<bool> AttachDynamicPropertyAsync(string itemPath, string properyName, string propertyValue)
        {
            return base.Channel.AttachDynamicPropertyAsync(itemPath, properyName, propertyValue);
        }
        
        public System.Threading.Tasks.Task<bool> AttachPersonAsync(string itemPath, string personFirstName, string personLastName, string personGroup)
        {
            return base.Channel.AttachPersonAsync(itemPath, personFirstName, personLastName, personGroup);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeDateAsync(string itemPath, System.DateTime newDate)
        {
            return base.Channel.ChangeDateAsync(itemPath, newDate);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeDescriptionAsync(string itemPath, string description)
        {
            return base.Channel.ChangeDescriptionAsync(itemPath, description);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeEventAsync(string itemPath, string eventName)
        {
            return base.Channel.ChangeEventAsync(itemPath, eventName);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeLocationAsync(string itemPath, string locationName, string locationCountry, string locationRegion)
        {
            return base.Channel.ChangeLocationAsync(itemPath, locationName, locationCountry, locationRegion);
        }
        
        public System.Threading.Tasks.Task<bool> EditItemAsync(string itemPath, string newDescription, bool changeDescription, string eventName, bool changeEvent, System.DateTime newDate, bool changeDate)
        {
            return base.Channel.EditItemAsync(itemPath, newDescription, changeDescription, eventName, changeEvent, newDate, changeDate);
        }
        
        public System.Threading.Tasks.Task<bool> MarkForDeleteAsync(string itemPath)
        {
            return base.Channel.MarkForDeleteAsync(itemPath);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveDynamicPropertyAsync(string itemPath, string properyName, string propertyValue)
        {
            return base.Channel.RemoveDynamicPropertyAsync(itemPath, properyName, propertyValue);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveEventAsync(string itemPath)
        {
            return base.Channel.RemoveEventAsync(itemPath);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveLocationAsync(string itemPath)
        {
            return base.Channel.RemoveLocationAsync(itemPath);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveLocationFromContextAsync(string name, string country, string region)
        {
            return base.Channel.RemoveLocationFromContextAsync(name, country, region);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePersonAsync(string itemPath, string personFirstName, string personLastName, string personGroup)
        {
            return base.Channel.RemovePersonAsync(itemPath, personFirstName, personLastName, personGroup);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePersonFromContextAsync(string firstName, string lastName, string group)
        {
            return base.Channel.RemovePersonFromContextAsync(firstName, lastName, group);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePropertyFromContextAsync(string name, string value)
        {
            return base.Channel.RemovePropertyFromContextAsync(name, value);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService,
        }
    }
}
