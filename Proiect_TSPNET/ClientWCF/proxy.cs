//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proiect_TSPNET
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaItemDTO", Namespace="http://schemas.datacontract.org/2004/07/Proiect_TSPNET")]
    public partial class MediaItemDTO : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime DateField;
        
        private string DescriptionField;
        
        private string EventField;
        
        private string ExtensionField;
        
        private bool IsPhotoField;
        
        private string LocationField;
        
        private bool MarkedForDeleteField;
        
        private string PathField;
        
        private bool PermanentDeleteField;
        
        private string TitleField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Event
        {
            get
            {
                return this.EventField;
            }
            set
            {
                this.EventField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension
        {
            get
            {
                return this.ExtensionField;
            }
            set
            {
                this.ExtensionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPhoto
        {
            get
            {
                return this.IsPhotoField;
            }
            set
            {
                this.IsPhotoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location
        {
            get
            {
                return this.LocationField;
            }
            set
            {
                this.LocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MarkedForDelete
        {
            get
            {
                return this.MarkedForDeleteField;
            }
            set
            {
                this.MarkedForDeleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PermanentDelete
        {
            get
            {
                return this.PermanentDeleteField;
            }
            set
            {
                this.PermanentDeleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyDTO", Namespace="http://schemas.datacontract.org/2004/07/Proiect_TSPNET")]
    public partial class PropertyDTO : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string NameField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonDTO", Namespace="http://schemas.datacontract.org/2004/07/Proiect_TSPNET")]
    public partial class PersonDTO : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FirstNameField;
        
        private string GroupField;
        
        private string LastNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                return this.FirstNameField;
            }
            set
            {
                this.FirstNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group
        {
            get
            {
                return this.GroupField;
            }
            set
            {
                this.GroupField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName
        {
            get
            {
                return this.LastNameField;
            }
            set
            {
                this.LastNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationDTO", Namespace="http://schemas.datacontract.org/2004/07/Proiect_TSPNET")]
    public partial class LocationDTO : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CountryField;
        
        private string NameField;
        
        private string RegionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country
        {
            get
            {
                return this.CountryField;
            }
            set
            {
                this.CountryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Region
        {
            get
            {
                return this.RegionField;
            }
            set
            {
                this.RegionField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IService")]
public interface IService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/AddAllMediaFilesFromFolder", ReplyAction="http://tempuri.org/ILocalItemsService/AddAllMediaFilesFromFolderResponse")]
    bool AddAllMediaFilesFromFolder(string path, bool recursive);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/AddAllMediaFilesFromFolder", ReplyAction="http://tempuri.org/ILocalItemsService/AddAllMediaFilesFromFolderResponse")]
    System.Threading.Tasks.Task<bool> AddAllMediaFilesFromFolderAsync(string path, bool recursive);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/AddLocalFile", ReplyAction="http://tempuri.org/ILocalItemsService/AddLocalFileResponse")]
    bool AddLocalFile(string path, string description, System.DateTime date, bool overwrite);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/AddLocalFile", ReplyAction="http://tempuri.org/ILocalItemsService/AddLocalFileResponse")]
    System.Threading.Tasks.Task<bool> AddLocalFileAsync(string path, string description, System.DateTime date, bool overwrite);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/CheckForMovedOrDeletedFiles", ReplyAction="http://tempuri.org/ILocalItemsService/CheckForMovedOrDeletedFilesResponse")]
    string[] CheckForMovedOrDeletedFiles();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/CheckForMovedOrDeletedFiles", ReplyAction="http://tempuri.org/ILocalItemsService/CheckForMovedOrDeletedFilesResponse")]
    System.Threading.Tasks.Task<string[]> CheckForMovedOrDeletedFilesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/ExportAsJSON", ReplyAction="http://tempuri.org/ILocalItemsService/ExportAsJSONResponse")]
    bool ExportAsJSON(string path, Proiect_TSPNET.MediaItemDTO[] items);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/ExportAsJSON", ReplyAction="http://tempuri.org/ILocalItemsService/ExportAsJSONResponse")]
    System.Threading.Tasks.Task<bool> ExportAsJSONAsync(string path, Proiect_TSPNET.MediaItemDTO[] items);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/GetAllMediaPathsFromFolder", ReplyAction="http://tempuri.org/ILocalItemsService/GetAllMediaPathsFromFolderResponse")]
    string[] GetAllMediaPathsFromFolder(string path, bool recursive);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/GetAllMediaPathsFromFolder", ReplyAction="http://tempuri.org/ILocalItemsService/GetAllMediaPathsFromFolderResponse")]
    System.Threading.Tasks.Task<string[]> GetAllMediaPathsFromFolderAsync(string path, bool recursive);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/GetItemName", ReplyAction="http://tempuri.org/ILocalItemsService/GetItemNameResponse")]
    string GetItemName(string itemPath, bool withExtension);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/GetItemName", ReplyAction="http://tempuri.org/ILocalItemsService/GetItemNameResponse")]
    System.Threading.Tasks.Task<string> GetItemNameAsync(string itemPath, bool withExtension);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/IsPhoto", ReplyAction="http://tempuri.org/ILocalItemsService/IsPhotoResponse")]
    bool IsPhoto(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/IsPhoto", ReplyAction="http://tempuri.org/ILocalItemsService/IsPhotoResponse")]
    System.Threading.Tasks.Task<bool> IsPhotoAsync(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/IsVideo", ReplyAction="http://tempuri.org/ILocalItemsService/IsVideoResponse")]
    bool IsVideo(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/IsVideo", ReplyAction="http://tempuri.org/ILocalItemsService/IsVideoResponse")]
    System.Threading.Tasks.Task<bool> IsVideoAsync(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/MoveFile", ReplyAction="http://tempuri.org/ILocalItemsService/MoveFileResponse")]
    void MoveFile(string oldPath, string newPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/MoveFile", ReplyAction="http://tempuri.org/ILocalItemsService/MoveFileResponse")]
    System.Threading.Tasks.Task MoveFileAsync(string oldPath, string newPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/RemoveMarkedFiles", ReplyAction="http://tempuri.org/ILocalItemsService/RemoveMarkedFilesResponse")]
    void RemoveMarkedFiles();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/RemoveMarkedFiles", ReplyAction="http://tempuri.org/ILocalItemsService/RemoveMarkedFilesResponse")]
    System.Threading.Tasks.Task RemoveMarkedFilesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/ViewItem", ReplyAction="http://tempuri.org/ILocalItemsService/ViewItemResponse")]
    bool ViewItem(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocalItemsService/ViewItem", ReplyAction="http://tempuri.org/ILocalItemsService/ViewItemResponse")]
    System.Threading.Tasks.Task<bool> ViewItemAsync(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/FileterByScalar", ReplyAction="http://tempuri.org/IItemsQueryService/FileterByScalarResponse")]
    Proiect_TSPNET.MediaItemDTO[] FileterByScalar(Proiect_TSPNET.MediaItemDTO[] items, string extension, bool extensionCheck, System.DateTime date, bool dateChecked, bool isPhoto, bool isPhotoChecked, string eventName, bool eventChecked);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/FileterByScalar", ReplyAction="http://tempuri.org/IItemsQueryService/FileterByScalarResponse")]
    System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> FileterByScalarAsync(Proiect_TSPNET.MediaItemDTO[] items, string extension, bool extensionCheck, System.DateTime date, bool dateChecked, bool isPhoto, bool isPhotoChecked, string eventName, bool eventChecked);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/FilterByRelation", ReplyAction="http://tempuri.org/IItemsQueryService/FilterByRelationResponse")]
    Proiect_TSPNET.MediaItemDTO[] FilterByRelation(Proiect_TSPNET.MediaItemDTO[] items, string value1, string value2, string value3, string filterType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/FilterByRelation", ReplyAction="http://tempuri.org/IItemsQueryService/FilterByRelationResponse")]
    System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> FilterByRelationAsync(Proiect_TSPNET.MediaItemDTO[] items, string value1, string value2, string value3, string filterType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItemDynamicProperties", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemDynamicPropertiesResponse")]
    Proiect_TSPNET.PropertyDTO[] GetItemDynamicProperties(string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItemDynamicProperties", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemDynamicPropertiesResponse")]
    System.Threading.Tasks.Task<Proiect_TSPNET.PropertyDTO[]> GetItemDynamicPropertiesAsync(string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItemPersons", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemPersonsResponse")]
    Proiect_TSPNET.PersonDTO[] GetItemPersons(string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItemPersons", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemPersonsResponse")]
    System.Threading.Tasks.Task<Proiect_TSPNET.PersonDTO[]> GetItemPersonsAsync(string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItems", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemsResponse")]
    Proiect_TSPNET.MediaItemDTO[] GetItems(bool markedForDelete, bool permanentDelete);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetItems", ReplyAction="http://tempuri.org/IItemsQueryService/GetItemsResponse")]
    System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> GetItemsAsync(bool markedForDelete, bool permanentDelete);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetLocations", ReplyAction="http://tempuri.org/IItemsQueryService/GetLocationsResponse")]
    Proiect_TSPNET.LocationDTO[] GetLocations();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetLocations", ReplyAction="http://tempuri.org/IItemsQueryService/GetLocationsResponse")]
    System.Threading.Tasks.Task<Proiect_TSPNET.LocationDTO[]> GetLocationsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetPersons", ReplyAction="http://tempuri.org/IItemsQueryService/GetPersonsResponse")]
    Proiect_TSPNET.PersonDTO[] GetPersons();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetPersons", ReplyAction="http://tempuri.org/IItemsQueryService/GetPersonsResponse")]
    System.Threading.Tasks.Task<Proiect_TSPNET.PersonDTO[]> GetPersonsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetProperties", ReplyAction="http://tempuri.org/IItemsQueryService/GetPropertiesResponse")]
    Proiect_TSPNET.PropertyDTO[] GetProperties();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsQueryService/GetProperties", ReplyAction="http://tempuri.org/IItemsQueryService/GetPropertiesResponse")]
    System.Threading.Tasks.Task<Proiect_TSPNET.PropertyDTO[]> GetPropertiesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AddDynamicPropery", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AddDynamicProperyResponse")]
    bool AddDynamicPropery(string name, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AddDynamicPropery", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AddDynamicProperyResponse")]
    System.Threading.Tasks.Task<bool> AddDynamicProperyAsync(string name, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AddLocation", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AddLocationResponse")]
    bool AddLocation(string name, string country, string region);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AddLocation", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AddLocationResponse")]
    System.Threading.Tasks.Task<bool> AddLocationAsync(string name, string country, string region);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AddPerson", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AddPersonResponse")]
    bool AddPerson(string firstName, string lastName, string group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AddPerson", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AddPersonResponse")]
    System.Threading.Tasks.Task<bool> AddPersonAsync(string firstName, string lastName, string group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AttachDynamicProperty", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AttachDynamicPropertyResponse")]
    bool AttachDynamicProperty(string itemPath, string properyName, string propertyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AttachDynamicProperty", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AttachDynamicPropertyResponse")]
    System.Threading.Tasks.Task<bool> AttachDynamicPropertyAsync(string itemPath, string properyName, string propertyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AttachPerson", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AttachPersonResponse")]
    bool AttachPerson(string itemPath, string personFirstName, string personLastName, string personGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/AttachPerson", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/AttachPersonResponse")]
    System.Threading.Tasks.Task<bool> AttachPersonAsync(string itemPath, string personFirstName, string personLastName, string personGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeDate", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeDateResponse")]
    bool ChangeDate(string itemPath, System.DateTime newDate);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeDate", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeDateResponse")]
    System.Threading.Tasks.Task<bool> ChangeDateAsync(string itemPath, System.DateTime newDate);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeDescription", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeDescriptionResponse")]
    bool ChangeDescription(string itemPath, string description);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeDescription", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeDescriptionResponse")]
    System.Threading.Tasks.Task<bool> ChangeDescriptionAsync(string itemPath, string description);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeEvent", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeEventResponse")]
    bool ChangeEvent(string itemPath, string eventName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeEvent", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeEventResponse")]
    System.Threading.Tasks.Task<bool> ChangeEventAsync(string itemPath, string eventName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeLocation", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeLocationResponse")]
    bool ChangeLocation(string itemPath, string locationName, string locationCountry, string locationRegion);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/ChangeLocation", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/ChangeLocationResponse")]
    System.Threading.Tasks.Task<bool> ChangeLocationAsync(string itemPath, string locationName, string locationCountry, string locationRegion);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/EditItem", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/EditItemResponse")]
    bool EditItem(string itemPath, string newDescription, bool changeDescription, string eventName, bool changeEvent, System.DateTime newDate, bool changeDate);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/EditItem", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/EditItemResponse")]
    System.Threading.Tasks.Task<bool> EditItemAsync(string itemPath, string newDescription, bool changeDescription, string eventName, bool changeEvent, System.DateTime newDate, bool changeDate);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/MarkForDelete", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/MarkForDeleteResponse")]
    bool MarkForDelete(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/MarkForDelete", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/MarkForDeleteResponse")]
    System.Threading.Tasks.Task<bool> MarkForDeleteAsync(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveDynamicProperty", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveDynamicPropertyResponse")]
    bool RemoveDynamicProperty(string itemPath, string properyName, string propertyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveDynamicProperty", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveDynamicPropertyResponse")]
    System.Threading.Tasks.Task<bool> RemoveDynamicPropertyAsync(string itemPath, string properyName, string propertyValue);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveEvent", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveEventResponse")]
    bool RemoveEvent(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveEvent", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveEventResponse")]
    System.Threading.Tasks.Task<bool> RemoveEventAsync(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocation", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocationResponse")]
    bool RemoveLocation(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocation", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocationResponse")]
    System.Threading.Tasks.Task<bool> RemoveLocationAsync(string itemPath);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocationFromContext", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocationFromContextResponse")]
    bool RemoveLocationFromContext(string name, string country, string region);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocationFromContext", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemoveLocationFromContextResponse")]
    System.Threading.Tasks.Task<bool> RemoveLocationFromContextAsync(string name, string country, string region);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemovePerson", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemovePersonResponse")]
    bool RemovePerson(string itemPath, string personFirstName, string personLastName, string personGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemovePerson", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemovePersonResponse")]
    System.Threading.Tasks.Task<bool> RemovePersonAsync(string itemPath, string personFirstName, string personLastName, string personGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemovePersonFromContext", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemovePersonFromContextResponse")]
    bool RemovePersonFromContext(string firstName, string lastName, string group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemovePersonFromContext", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemovePersonFromContextResponse")]
    System.Threading.Tasks.Task<bool> RemovePersonFromContextAsync(string firstName, string lastName, string group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemovePropertyFromContext", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemovePropertyFromContextResponse")]
    bool RemovePropertyFromContext(string name, string value);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemsEditAddRemoveService/RemovePropertyFromContext", ReplyAction="http://tempuri.org/IItemsEditAddRemoveService/RemovePropertyFromContextResponse")]
    System.Threading.Tasks.Task<bool> RemovePropertyFromContextAsync(string name, string value);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IServiceChannel : IService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ServiceClient : System.ServiceModel.ClientBase<IService>, IService
{
    
    public ServiceClient()
    {
    }
    
    public ServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public bool AddAllMediaFilesFromFolder(string path, bool recursive)
    {
        return base.Channel.AddAllMediaFilesFromFolder(path, recursive);
    }
    
    public System.Threading.Tasks.Task<bool> AddAllMediaFilesFromFolderAsync(string path, bool recursive)
    {
        return base.Channel.AddAllMediaFilesFromFolderAsync(path, recursive);
    }
    
    public bool AddLocalFile(string path, string description, System.DateTime date, bool overwrite)
    {
        return base.Channel.AddLocalFile(path, description, date, overwrite);
    }
    
    public System.Threading.Tasks.Task<bool> AddLocalFileAsync(string path, string description, System.DateTime date, bool overwrite)
    {
        return base.Channel.AddLocalFileAsync(path, description, date, overwrite);
    }
    
    public string[] CheckForMovedOrDeletedFiles()
    {
        return base.Channel.CheckForMovedOrDeletedFiles();
    }
    
    public System.Threading.Tasks.Task<string[]> CheckForMovedOrDeletedFilesAsync()
    {
        return base.Channel.CheckForMovedOrDeletedFilesAsync();
    }
    
    public bool ExportAsJSON(string path, Proiect_TSPNET.MediaItemDTO[] items)
    {
        return base.Channel.ExportAsJSON(path, items);
    }
    
    public System.Threading.Tasks.Task<bool> ExportAsJSONAsync(string path, Proiect_TSPNET.MediaItemDTO[] items)
    {
        return base.Channel.ExportAsJSONAsync(path, items);
    }
    
    public string[] GetAllMediaPathsFromFolder(string path, bool recursive)
    {
        return base.Channel.GetAllMediaPathsFromFolder(path, recursive);
    }
    
    public System.Threading.Tasks.Task<string[]> GetAllMediaPathsFromFolderAsync(string path, bool recursive)
    {
        return base.Channel.GetAllMediaPathsFromFolderAsync(path, recursive);
    }
    
    public string GetItemName(string itemPath, bool withExtension)
    {
        return base.Channel.GetItemName(itemPath, withExtension);
    }
    
    public System.Threading.Tasks.Task<string> GetItemNameAsync(string itemPath, bool withExtension)
    {
        return base.Channel.GetItemNameAsync(itemPath, withExtension);
    }
    
    public bool IsPhoto(string itemPath)
    {
        return base.Channel.IsPhoto(itemPath);
    }
    
    public System.Threading.Tasks.Task<bool> IsPhotoAsync(string itemPath)
    {
        return base.Channel.IsPhotoAsync(itemPath);
    }
    
    public bool IsVideo(string itemPath)
    {
        return base.Channel.IsVideo(itemPath);
    }
    
    public System.Threading.Tasks.Task<bool> IsVideoAsync(string itemPath)
    {
        return base.Channel.IsVideoAsync(itemPath);
    }
    
    public void MoveFile(string oldPath, string newPath)
    {
        base.Channel.MoveFile(oldPath, newPath);
    }
    
    public System.Threading.Tasks.Task MoveFileAsync(string oldPath, string newPath)
    {
        return base.Channel.MoveFileAsync(oldPath, newPath);
    }
    
    public void RemoveMarkedFiles()
    {
        base.Channel.RemoveMarkedFiles();
    }
    
    public System.Threading.Tasks.Task RemoveMarkedFilesAsync()
    {
        return base.Channel.RemoveMarkedFilesAsync();
    }
    
    public bool ViewItem(string itemPath)
    {
        return base.Channel.ViewItem(itemPath);
    }
    
    public System.Threading.Tasks.Task<bool> ViewItemAsync(string itemPath)
    {
        return base.Channel.ViewItemAsync(itemPath);
    }
    
    public Proiect_TSPNET.MediaItemDTO[] FileterByScalar(Proiect_TSPNET.MediaItemDTO[] items, string extension, bool extensionCheck, System.DateTime date, bool dateChecked, bool isPhoto, bool isPhotoChecked, string eventName, bool eventChecked)
    {
        return base.Channel.FileterByScalar(items, extension, extensionCheck, date, dateChecked, isPhoto, isPhotoChecked, eventName, eventChecked);
    }
    
    public System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> FileterByScalarAsync(Proiect_TSPNET.MediaItemDTO[] items, string extension, bool extensionCheck, System.DateTime date, bool dateChecked, bool isPhoto, bool isPhotoChecked, string eventName, bool eventChecked)
    {
        return base.Channel.FileterByScalarAsync(items, extension, extensionCheck, date, dateChecked, isPhoto, isPhotoChecked, eventName, eventChecked);
    }
    
    public Proiect_TSPNET.MediaItemDTO[] FilterByRelation(Proiect_TSPNET.MediaItemDTO[] items, string value1, string value2, string value3, string filterType)
    {
        return base.Channel.FilterByRelation(items, value1, value2, value3, filterType);
    }
    
    public System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> FilterByRelationAsync(Proiect_TSPNET.MediaItemDTO[] items, string value1, string value2, string value3, string filterType)
    {
        return base.Channel.FilterByRelationAsync(items, value1, value2, value3, filterType);
    }
    
    public Proiect_TSPNET.PropertyDTO[] GetItemDynamicProperties(string path)
    {
        return base.Channel.GetItemDynamicProperties(path);
    }
    
    public System.Threading.Tasks.Task<Proiect_TSPNET.PropertyDTO[]> GetItemDynamicPropertiesAsync(string path)
    {
        return base.Channel.GetItemDynamicPropertiesAsync(path);
    }
    
    public Proiect_TSPNET.PersonDTO[] GetItemPersons(string path)
    {
        return base.Channel.GetItemPersons(path);
    }
    
    public System.Threading.Tasks.Task<Proiect_TSPNET.PersonDTO[]> GetItemPersonsAsync(string path)
    {
        return base.Channel.GetItemPersonsAsync(path);
    }
    
    public Proiect_TSPNET.MediaItemDTO[] GetItems(bool markedForDelete, bool permanentDelete)
    {
        return base.Channel.GetItems(markedForDelete, permanentDelete);
    }
    
    public System.Threading.Tasks.Task<Proiect_TSPNET.MediaItemDTO[]> GetItemsAsync(bool markedForDelete, bool permanentDelete)
    {
        return base.Channel.GetItemsAsync(markedForDelete, permanentDelete);
    }
    
    public Proiect_TSPNET.LocationDTO[] GetLocations()
    {
        return base.Channel.GetLocations();
    }
    
    public System.Threading.Tasks.Task<Proiect_TSPNET.LocationDTO[]> GetLocationsAsync()
    {
        return base.Channel.GetLocationsAsync();
    }
    
    public Proiect_TSPNET.PersonDTO[] GetPersons()
    {
        return base.Channel.GetPersons();
    }
    
    public System.Threading.Tasks.Task<Proiect_TSPNET.PersonDTO[]> GetPersonsAsync()
    {
        return base.Channel.GetPersonsAsync();
    }
    
    public Proiect_TSPNET.PropertyDTO[] GetProperties()
    {
        return base.Channel.GetProperties();
    }
    
    public System.Threading.Tasks.Task<Proiect_TSPNET.PropertyDTO[]> GetPropertiesAsync()
    {
        return base.Channel.GetPropertiesAsync();
    }
    
    public bool AddDynamicPropery(string name, string value)
    {
        return base.Channel.AddDynamicPropery(name, value);
    }
    
    public System.Threading.Tasks.Task<bool> AddDynamicProperyAsync(string name, string value)
    {
        return base.Channel.AddDynamicProperyAsync(name, value);
    }
    
    public bool AddLocation(string name, string country, string region)
    {
        return base.Channel.AddLocation(name, country, region);
    }
    
    public System.Threading.Tasks.Task<bool> AddLocationAsync(string name, string country, string region)
    {
        return base.Channel.AddLocationAsync(name, country, region);
    }
    
    public bool AddPerson(string firstName, string lastName, string group)
    {
        return base.Channel.AddPerson(firstName, lastName, group);
    }
    
    public System.Threading.Tasks.Task<bool> AddPersonAsync(string firstName, string lastName, string group)
    {
        return base.Channel.AddPersonAsync(firstName, lastName, group);
    }
    
    public bool AttachDynamicProperty(string itemPath, string properyName, string propertyValue)
    {
        return base.Channel.AttachDynamicProperty(itemPath, properyName, propertyValue);
    }
    
    public System.Threading.Tasks.Task<bool> AttachDynamicPropertyAsync(string itemPath, string properyName, string propertyValue)
    {
        return base.Channel.AttachDynamicPropertyAsync(itemPath, properyName, propertyValue);
    }
    
    public bool AttachPerson(string itemPath, string personFirstName, string personLastName, string personGroup)
    {
        return base.Channel.AttachPerson(itemPath, personFirstName, personLastName, personGroup);
    }
    
    public System.Threading.Tasks.Task<bool> AttachPersonAsync(string itemPath, string personFirstName, string personLastName, string personGroup)
    {
        return base.Channel.AttachPersonAsync(itemPath, personFirstName, personLastName, personGroup);
    }
    
    public bool ChangeDate(string itemPath, System.DateTime newDate)
    {
        return base.Channel.ChangeDate(itemPath, newDate);
    }
    
    public System.Threading.Tasks.Task<bool> ChangeDateAsync(string itemPath, System.DateTime newDate)
    {
        return base.Channel.ChangeDateAsync(itemPath, newDate);
    }
    
    public bool ChangeDescription(string itemPath, string description)
    {
        return base.Channel.ChangeDescription(itemPath, description);
    }
    
    public System.Threading.Tasks.Task<bool> ChangeDescriptionAsync(string itemPath, string description)
    {
        return base.Channel.ChangeDescriptionAsync(itemPath, description);
    }
    
    public bool ChangeEvent(string itemPath, string eventName)
    {
        return base.Channel.ChangeEvent(itemPath, eventName);
    }
    
    public System.Threading.Tasks.Task<bool> ChangeEventAsync(string itemPath, string eventName)
    {
        return base.Channel.ChangeEventAsync(itemPath, eventName);
    }
    
    public bool ChangeLocation(string itemPath, string locationName, string locationCountry, string locationRegion)
    {
        return base.Channel.ChangeLocation(itemPath, locationName, locationCountry, locationRegion);
    }
    
    public System.Threading.Tasks.Task<bool> ChangeLocationAsync(string itemPath, string locationName, string locationCountry, string locationRegion)
    {
        return base.Channel.ChangeLocationAsync(itemPath, locationName, locationCountry, locationRegion);
    }
    
    public bool EditItem(string itemPath, string newDescription, bool changeDescription, string eventName, bool changeEvent, System.DateTime newDate, bool changeDate)
    {
        return base.Channel.EditItem(itemPath, newDescription, changeDescription, eventName, changeEvent, newDate, changeDate);
    }
    
    public System.Threading.Tasks.Task<bool> EditItemAsync(string itemPath, string newDescription, bool changeDescription, string eventName, bool changeEvent, System.DateTime newDate, bool changeDate)
    {
        return base.Channel.EditItemAsync(itemPath, newDescription, changeDescription, eventName, changeEvent, newDate, changeDate);
    }
    
    public bool MarkForDelete(string itemPath)
    {
        return base.Channel.MarkForDelete(itemPath);
    }
    
    public System.Threading.Tasks.Task<bool> MarkForDeleteAsync(string itemPath)
    {
        return base.Channel.MarkForDeleteAsync(itemPath);
    }
    
    public bool RemoveDynamicProperty(string itemPath, string properyName, string propertyValue)
    {
        return base.Channel.RemoveDynamicProperty(itemPath, properyName, propertyValue);
    }
    
    public System.Threading.Tasks.Task<bool> RemoveDynamicPropertyAsync(string itemPath, string properyName, string propertyValue)
    {
        return base.Channel.RemoveDynamicPropertyAsync(itemPath, properyName, propertyValue);
    }
    
    public bool RemoveEvent(string itemPath)
    {
        return base.Channel.RemoveEvent(itemPath);
    }
    
    public System.Threading.Tasks.Task<bool> RemoveEventAsync(string itemPath)
    {
        return base.Channel.RemoveEventAsync(itemPath);
    }
    
    public bool RemoveLocation(string itemPath)
    {
        return base.Channel.RemoveLocation(itemPath);
    }
    
    public System.Threading.Tasks.Task<bool> RemoveLocationAsync(string itemPath)
    {
        return base.Channel.RemoveLocationAsync(itemPath);
    }
    
    public bool RemoveLocationFromContext(string name, string country, string region)
    {
        return base.Channel.RemoveLocationFromContext(name, country, region);
    }
    
    public System.Threading.Tasks.Task<bool> RemoveLocationFromContextAsync(string name, string country, string region)
    {
        return base.Channel.RemoveLocationFromContextAsync(name, country, region);
    }
    
    public bool RemovePerson(string itemPath, string personFirstName, string personLastName, string personGroup)
    {
        return base.Channel.RemovePerson(itemPath, personFirstName, personLastName, personGroup);
    }
    
    public System.Threading.Tasks.Task<bool> RemovePersonAsync(string itemPath, string personFirstName, string personLastName, string personGroup)
    {
        return base.Channel.RemovePersonAsync(itemPath, personFirstName, personLastName, personGroup);
    }
    
    public bool RemovePersonFromContext(string firstName, string lastName, string group)
    {
        return base.Channel.RemovePersonFromContext(firstName, lastName, group);
    }
    
    public System.Threading.Tasks.Task<bool> RemovePersonFromContextAsync(string firstName, string lastName, string group)
    {
        return base.Channel.RemovePersonFromContextAsync(firstName, lastName, group);
    }
    
    public bool RemovePropertyFromContext(string name, string value)
    {
        return base.Channel.RemovePropertyFromContext(name, value);
    }
    
    public System.Threading.Tasks.Task<bool> RemovePropertyFromContextAsync(string name, string value)
    {
        return base.Channel.RemovePropertyFromContextAsync(name, value);
    }
}
